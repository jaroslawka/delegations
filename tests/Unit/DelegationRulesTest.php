<?php

namespace Tests\Unit;

use App\Models\Delegation;
use App\Services\DelegationService;
use Tests\TestCase;

class DelegationRulesTest extends TestCase
{
    protected function getPeriodsWithValidAmount(): array
    {
        /* Rules:
            - the allowance only when the number of hours is at least 8
            - when the day is Saturday and Sundays no allowance
            - when the allowance is longer than 7 days - for next day allowance amount is doubled
        */

        // start date , end date, amount due (amount base = 10 for country PL)

        return [
            ['2022-08-02 07:59:00', '2022-08-02 14:59:00', '0'],
            ['2022-08-03 07:59:00', '2022-08-03 14:59:00', '0'],
            ['2022-08-04 07:59:00', '2022-08-04 14:59:00', '0'],
            ['2022-08-05 07:59:00', '2022-08-05 14:59:00', '0'],
            ['2022-08-06 07:59:00', '2022-08-06 14:59:00', '0'],
            ['2022-08-07 07:59:00', '2022-08-07 14:59:00', '0'],
            ['2022-08-01 07:59:00', '2022-08-01 15:59:00', '10'],
            ['2022-08-02 07:59:00', '2022-08-02 15:59:00', '10'],
            ['2022-08-03 07:59:00', '2022-08-03 15:59:00', '10'],
            ['2022-08-04 07:59:00', '2022-08-04 15:59:00', '10'],
            ['2022-08-05 07:59:00', '2022-08-05 15:59:00', '10'],
            ['2022-08-06 07:59:00', '2022-08-06 15:59:00', '0'],
            ['2022-08-07 07:59:00', '2022-08-07 15:59:00', '0'],
            ['2022-08-01 08:59:00', '2022-08-01 20:59:00', '10'],
            ['2022-08-02 08:59:00', '2022-08-02 20:59:00', '10'],
            ['2022-08-03 08:59:00', '2022-08-03 20:59:00', '10'],
            ['2022-08-04 08:59:00', '2022-08-04 20:59:00', '10'],
            ['2022-08-05 08:59:00', '2022-08-05 20:59:00', '10'],
            ['2022-08-06 08:59:00', '2022-08-06 20:59:00', '0'],
            ['2022-08-07 08:59:00', '2022-08-07 20:59:00', '0'],
            ['2022-08-01 16:01:00', '2022-08-02 07:59:00', '0'],
            ['2022-08-02 16:01:00', '2022-08-03 07:59:00', '0'],
            ['2022-08-03 16:01:00', '2022-08-04 07:59:00', '0'],
            ['2022-08-04 16:01:00', '2022-08-05 07:59:00', '0'],
            ['2022-08-05 16:01:00', '2022-08-06 07:59:00', '0'],
            ['2022-08-06 16:01:00', '2022-08-07 07:59:00', '0'],
            ['2022-08-07 16:01:00', '2022-08-08 07:59:00', '0'],
            ['2022-08-01 16:01:00', '2022-08-02 08:01:00', '10'],
            ['2022-08-02 16:01:00', '2022-08-03 08:01:00', '10'],
            ['2022-08-03 16:01:00', '2022-08-04 08:01:00', '10'],
            ['2022-08-04 16:01:00', '2022-08-05 08:01:00', '10'],
            ['2022-08-05 16:01:00', '2022-08-06 08:01:00', '0'],
            ['2022-08-06 16:01:00', '2022-08-07 08:01:00', '0'],
            ['2022-08-07 16:01:00', '2022-08-08 08:01:00', '10'],
            ['2022-08-01 15:59:00', '2022-08-02 07:59:00', '10'],
            ['2022-08-02 15:59:00', '2022-08-03 07:59:00', '10'],
            ['2022-08-03 15:59:00', '2022-08-04 07:59:00', '10'],
            ['2022-08-04 15:59:00', '2022-08-05 07:59:00', '10'],
            ['2022-08-05 15:59:00', '2022-08-06 07:59:00', '10'],
            ['2022-08-06 15:59:00', '2022-08-07 07:59:00', '0'],
            ['2022-08-07 15:59:00', '2022-08-08 07:59:00', '0'],
            ['2022-08-01 15:59:00', '2022-08-02 08:01:00', '20'],
            ['2022-08-02 15:59:00', '2022-08-03 08:01:00', '20'],
            ['2022-08-03 15:59:00', '2022-08-04 08:01:00', '20'],
            ['2022-08-04 15:59:00', '2022-08-05 08:01:00', '20'],
            ['2022-08-05 15:59:00', '2022-08-06 08:01:00', '10'],
            ['2022-08-06 15:59:00', '2022-08-07 08:01:00', '0'],
            ['2022-08-07 15:59:00', '2022-08-08 08:01:00', '10'],
            ['2022-08-01 16:01:00', '2022-08-03 07:59:00', '10'],
            ['2022-08-02 16:01:00', '2022-08-04 07:59:00', '10'],
            ['2022-08-03 16:01:00', '2022-08-05 07:59:00', '10'],
            ['2022-08-04 16:01:00', '2022-08-06 07:59:00', '10'],
            ['2022-08-05 16:01:00', '2022-08-07 07:59:00', '0'],
            ['2022-08-06 16:01:00', '2022-08-08 07:59:00', '0'],
            ['2022-08-07 16:01:00', '2022-08-09 07:59:00', '10'],
            ['2022-08-01 16:01:00', '2022-08-03 08:01:00', '20'],
            ['2022-08-02 16:01:00', '2022-08-04 08:01:00', '20'],
            ['2022-08-03 16:01:00', '2022-08-05 08:01:00', '20'],
            ['2022-08-04 16:01:00', '2022-08-06 08:01:00', '10'],
            ['2022-08-05 16:01:00', '2022-08-07 08:01:00', '0'],
            ['2022-08-06 16:01:00', '2022-08-08 08:01:00', '10'],
            ['2022-08-07 16:01:00', '2022-08-09 08:01:00', '20'],
            ['2022-08-01 15:59:00', '2022-08-03 07:59:00', '20'],
            ['2022-08-02 15:59:00', '2022-08-04 07:59:00', '20'],
            ['2022-08-03 15:59:00', '2022-08-05 07:59:00', '20'],
            ['2022-08-04 15:59:00', '2022-08-06 07:59:00', '20'],
            ['2022-08-05 15:59:00', '2022-08-07 07:59:00', '10'],
            ['2022-08-06 15:59:00', '2022-08-08 07:59:00', '0'],
            ['2022-08-07 15:59:00', '2022-08-09 07:59:00', '10'],
            ['2022-08-01 15:59:00', '2022-08-03 08:01:00', '30'],
            ['2022-08-02 15:59:00', '2022-08-04 08:01:00', '30'],
            ['2022-08-03 15:59:00', '2022-08-05 08:01:00', '30'],
            ['2022-08-04 15:59:00', '2022-08-06 08:01:00', '20'],
            ['2022-08-05 15:59:00', '2022-08-07 08:01:00', '10'],
            ['2022-08-06 15:59:00', '2022-08-08 08:01:00', '10'],
            ['2022-08-07 15:59:00', '2022-08-09 08:01:00', '20'],
            ['2022-08-01 16:01:00', '2022-08-04 07:59:00', '20'],
            ['2022-08-02 16:01:00', '2022-08-05 07:59:00', '20'],
            ['2022-08-03 16:01:00', '2022-08-06 07:59:00', '20'],
            ['2022-08-04 16:01:00', '2022-08-07 07:59:00', '10'],
            ['2022-08-05 16:01:00', '2022-08-08 07:59:00', '0'],
            ['2022-08-06 16:01:00', '2022-08-09 07:59:00', '10'],
            ['2022-08-07 16:01:00', '2022-08-10 07:59:00', '20'],
            ['2022-08-01 16:01:00', '2022-08-04 08:01:00', '30'],
            ['2022-08-02 16:01:00', '2022-08-05 08:01:00', '30'],
            ['2022-08-03 16:01:00', '2022-08-06 08:01:00', '20'],
            ['2022-08-04 16:01:00', '2022-08-07 08:01:00', '10'],
            ['2022-08-05 16:01:00', '2022-08-08 08:01:00', '10'],
            ['2022-08-06 16:01:00', '2022-08-09 08:01:00', '20'],
            ['2022-08-07 16:01:00', '2022-08-10 08:01:00', '30'],
            ['2022-08-01 15:59:00', '2022-08-04 07:59:00', '30'],
            ['2022-08-02 15:59:00', '2022-08-05 07:59:00', '30'],
            ['2022-08-03 15:59:00', '2022-08-06 07:59:00', '30'],
            ['2022-08-04 15:59:00', '2022-08-07 07:59:00', '20'],
            ['2022-08-05 15:59:00', '2022-08-08 07:59:00', '10'],
            ['2022-08-06 15:59:00', '2022-08-09 07:59:00', '10'],
            ['2022-08-07 15:59:00', '2022-08-10 07:59:00', '20'],
            ['2022-08-01 15:59:00', '2022-08-04 08:01:00', '40'],
            ['2022-08-02 15:59:00', '2022-08-05 08:01:00', '40'],
            ['2022-08-03 15:59:00', '2022-08-06 08:01:00', '30'],
            ['2022-08-04 15:59:00', '2022-08-07 08:01:00', '20'],
            ['2022-08-05 15:59:00', '2022-08-08 08:01:00', '20'],
            ['2022-08-06 15:59:00', '2022-08-09 08:01:00', '20'],
            ['2022-08-07 15:59:00', '2022-08-10 08:01:00', '30'],
            ['2022-08-01 15:59:00', '2022-08-10 08:01:00', '110'],
        ];
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_amount_due_callculation()
    {
        $delegationService = new DelegationService();
        $delegation = Delegation::factory()->make();
        $periods = $this->getPeriodsWithValidAmount();

        foreach ($periods AS $period) {
            $delegation->start = $start = $period[0];
            $delegation->end = $end = $period[1];
            $delegation->country = 'PL';
            $amountDueShouldBe = (int)$period[2];

            $message = "PERIOD: start: " . $start . " end: " . $end;

            $amountDue = $delegationService->calculateAmountDue($delegation);

            $this->assertEquals($amountDueShouldBe, $amountDue, $message);
        }

        $this->assertTrue(true);
    }
}
